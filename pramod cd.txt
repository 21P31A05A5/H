1. Write a C program to identify different types of Tokens in a given Program.
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Returns 'true' if the character is a DELIMITER.
bool isDelimiter(char ch)
{
	if (ch == ' ' || ch == '+' || ch == '-' || ch == '*' || 
		ch == '/' || ch == ',' || ch == ';' || ch == '>' || 
		ch == '<' || ch == '=' || ch == '(' || ch == ')' || 
		ch == '[' || ch == ']' || ch == '{' || ch == '}')
		return (true);
	return (false);
}

// Returns 'true' if the character is an OPERATOR.
bool isOperator(char ch)
{
	if (ch == '+' || ch == '-' || ch == '*' || 
		ch == '/' || ch == '>' || ch == '<' || 
		ch == '=')
		return (true);
	return (false);
}
// Returns 'true' if the string is a VALID IDENTIFIER.
bool validIdentifier(char* str)
{
	if (str[0] == '0' || str[0] == '1' || str[0] == '2' ||
		str[0] == '3' || str[0] == '4' || str[0] == '5' || 
		str[0] == '6' || str[0] == '7' || str[0] == '8' || 
		str[0] == '9' || isDelimiter(str[0]) == true)
		return (false);
	return (true);
}

// Returns 'true' if the string is a KEYWORD.
bool isKeyword(char* str)
{
	if (!strcmp(str, "if") || !strcmp(str, "else") ||
		!strcmp(str, "while") || !strcmp(str, "do") || 
		!strcmp(str, "break") || 
		!strcmp(str, "continue") || !strcmp(str, "int")
		|| !strcmp(str, "double") || !strcmp(str, "float")
		|| !strcmp(str, "return") || !strcmp(str, "char")
		|| !strcmp(str, "case") || !strcmp(str, "char")
		|| !strcmp(str, "sizeof") || !strcmp(str, "long")
		|| !strcmp(str, "short") || !strcmp(str, "typedef")
		|| !strcmp(str, "switch") || !strcmp(str, "unsigned")
		|| !strcmp(str, "void") || !strcmp(str, "static")
		|| !strcmp(str, "struct") || !strcmp(str, "goto"))
		return (true);
	return (false);
}
// Returns 'true' if the string is an INTEGER.
bool isInteger(char* str)
{
	int i, len = strlen(str);
	if (len == 0)
		return (false);
	for (i = 0; i < len; i++) {
		if (str[i] != '0' && str[i] != '1' && str[i] != '2'
			&& str[i] != '3' && str[i] != '4' && str[i] != '5'
			&& str[i] != '6' && str[i] != '7' && str[i] != '8'
			&& str[i] != '9' || (str[i] == '-' && i > 0))
			return (false);
	}
	return (true);
}

// Returns 'true' if the string is a REAL NUMBER.
bool isRealNumber(char* str)
{
	int i, len = strlen(str);
	bool hasDecimal = false;

	if (len == 0)
		return (false);
	for (i = 0; i < len; i++) {
		if (str[i] != '0' && str[i] != '1' && str[i] != '2'
			&& str[i] != '3' && str[i] != '4' && str[i] != '5'
			&& str[i] != '6' && str[i] != '7' && str[i] != '8'
			&& str[i] != '9' && str[i] != '.' || 
			(str[i] == '-' && i > 0))
			return (false);
		if (str[i] == '.')
			hasDecimal = true;
	}
	return (hasDecimal);
}
// Extracts the SUBSTRING.
char* subString(char* str, int left, int right)
{
	int i;
	char* subStr = (char*)malloc(sizeof(char) * (right - left + 2));

	for (i = left; i <= right; i++)
		subStr[i - left] = str[i];
	subStr[right - left + 1] = '\0';
	return (subStr);
}

// Parsing the input STRING.
void parse(char* str)
{
	int left = 0, right = 0;
	int len = strlen(str);

	while (right <= len && left <= right) {
		if (isDelimiter(str[right]) == false)
			right++;

		if (isDelimiter(str[right]) == true && left == right) {
			if (isOperator(str[right]) == true)
				printf("'%c' IS AN OPERATOR\n", str[right]);

			right++;
			left = right;
		} else if (isDelimiter(str[right]) == true && left != right
				|| (right == len && left != right)) {
			char* subStr = subString(str, left, right - 1);

			if (isKeyword(subStr) == true)
				printf("'%s' IS A KEYWORD\n", subStr);

			else if (isInteger(subStr) == true)
				printf("'%s' IS AN INTEGER\n", subStr);

			else if (isRealNumber(subStr) == true)
				printf("'%s' IS A REAL NUMBER\n", subStr);

			else if (validIdentifier(subStr) == true
					&& isDelimiter(str[right - 1]) == false)
				printf("'%s' IS A VALID IDENTIFIER\n", subStr);

			else if (validIdentifier(subStr) == false
					&& isDelimiter(str[right - 1]) == false)
				printf("'%s' IS NOT A VALID IDENTIFIER\n", subStr);
			left = right;
		}
	}
	return;
}

// DRIVER FUNCTION
int main()
{
	// maximum length of string is 100 here 
	char str[100] = "int a = b + 1c; ";

	parse(str); // calling the parse function

	return (0);
}




Exp10: Write a C program for the implementation of a Shift Reduce Parser using Stack Data Structure to accept a given input string of a given grammar.

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
char ip_sym[15],stack[15]; int ip_ptr=0,st_ptr=0,len,i; char temp[2],temp2[2]; char act[15];
void check(); 
int main()
{
printf("\n\n\t Shift Reduce Parser\n");
 printf("\n\t***** ****** ******");
printf("\nGrammar\n"); 
printf("E->E+E\nE->E/E\n");
 printf("E->E*E\nE->a/b");
printf("\nEnter the Input Symbol:"); 
scanf("%s",ip_sym);
printf("\n\n\t Stack Implementation Table");
 printf("\n Stack\t\t Input Symbol\t\t Action"); 
printf("\n $\t\t\t%s$\t\t\t --",ip_sym); 
strcpy(act,"shift");
temp[0]=ip_sym[ip_ptr]; 
temp[1]='\0';
 strcat(act,temp); 
len=strlen(ip_sym); 
for(i=0;i<=len-1;i++)
{
stack[st_ptr]=ip_sym[ip_ptr];
 stack[st_ptr+1]='\0';
 ip_sym[ip_ptr]=' ';
ip_ptr++;
 printf("\n$%s\t\t%s$\t\t\t%s", stack,ip_sym,act); 
strcpy(act,"shift");
temp[0]=ip_sym[ip_ptr]; 
temp[1]='\0';
 strcat(act,temp); 
check();
st_ptr++;
}
st_ptr++; 
check();
 return 0;
}

void check()
{
int flag=0; 
temp2[0]=stack[st_ptr]; 
temp[1]='\0';
if((!strcmp(temp2,"a"))||(!strcmp(temp2,"b")))
{
stack[st_ptr]='E'; 
if(!strcmp(temp2,"a"))
printf("\n$%s\t\t%s$\t\t\tE->a",stack,ip_sym); 
else printf("\n$%s\t\t%s$\t\t\tE->a",stack,ip_sym);
 flag=1;
}
if((!strcmp(temp2,"+"))||(strcmp(temp2,"*"))||(!strcmp(temp2,"/")))
{
flag=1;
}
if((!strcmp(stack,"E+E"))||(!strcmp(stack,"E/E"))||(!strcmp(stack,"E*E")))
{
strcpy(stack,"E"); 
st_ptr=0; 
if(!strcmp(stack,"E+E"))
printf("\n$%s\t\t%s$\t\t\tE->E+E",stack,ip_sym);
 else
if(!strcmp(stack,"E/E"))
 printf("\n$%s\t\t\t%s$\t\tE->E/E",stack,ip_sym); 
else printf("\n$%s\t\t%s$\t\t\tE->E*E",stack,ip_sym); 
flag=1;
}
if(!strcmp(stack,"E")&&ip_ptr==len)
{
printf("\n$%s\t\t%s$\t\t\tAccept",ip_sym);
exit(0);
}
if(flag==0)
{
printf("\n %s \t\t\t %s \t\t Reject",stack,ip_sym);
}
return;
}

OUTPUT1

	 Shift Reduce Parser

	***** ****** ******
Grammar
E->E+E
E->E/E
E->E*E
E->a/b
Enter the Input Symbol:a+b$


	 Stack Implementation Table
 Stack		 Input Symbol		 Action
 $		a+b$$			 --
$a		 +b$$			shifta
$E		 +b$$			E->a
$E+		  b$$			shift+
$E+b		   $$			shiftb
$E+E		   $$			E->a
$E		   $$			E->E*E
$E$		    $			shift$

=== Code Execution Successful ===



